% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Predictor.R
\name{Predictor}
\alias{Predictor}
\title{Predictor object}
\format{\code{\link{R6Class}} object.}
\value{
object of type Predictor
}
\description{
A \code{Predictor} object wraps any machine learning model (mlr, caret, randomForest, ...). 
The object is to be used for the interpretation methods.
}
\section{Usage}{

\preformatted{
model = Predictor$new(object, class=NULL, predict.args = NULL)

model$predict(newdata)
}
}

\section{Arguments}{

\describe{
\item{model}{The machine learning model. Recommended are models from mlr and caret.
Other machine learning with a S3 predict functions work as well, but less robust (e.g. randomForest).
\code{model} can also be a function that returns the prediction as a data.frame, given the features.}
\item{class}{The class column to be returned in case of multiClass output.}
\item{predict.args}{Further arguments for the prediction function of each model. Depends on the class of the original machine learning model. 
See examples.}
}
}

\section{Details}{
 
In case of classification, the model must return the probabilities. Predictor doesn't handle machine learning
models that return the labels.
}

\section{Fields}{

\describe{
\item{class}{The class column to be returned.}
\item{prediction.colnames}{The column names of the predictions.}
\item{task}{The inferred prediction task: "classification" or "regression".}
}
}

\section{Methods}{

\describe{
\item{predict(newdata)}{method to predict new data with the machine learning model. See also \link{predict.TreeSurrogate}}
\item{\code{clone()}}{[internal] method to clone the R6 object.}
\item{\code{initialize()}}{[internal] method to initialize the R6 object.}
}
}

\examples{
if (require("mlr")){
task = makeClassifTask(data = iris, target = "Species")
learner = makeLearner("classif.rpart", minsplit = 7, predict.type = "prob")
mod.mlr = train(learner, task)
mod = Predictor$new(mod.mlr)
mod$predict(iris[1:5,])

mod = Predictor$new(mod.mlr, class = "setosa")
mod$predict(iris[1:5,])
}

if (require("randomForest")) {
rf = randomForest(Species ~ ., data = iris, ntree = 20)
mod = Predictor$new(rf, predict.args = list(type = "prob"))
mod$predict(iris[50:55,])
}
}
