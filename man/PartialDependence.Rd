% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PartialDependence.R
\name{PartialDependence}
\alias{PartialDependence}
\title{Partial Dependence Plot}
\format{\code{\link{R6Class}} object.}
\description{
\code{PartialDependence} computes and plots partial dependence functions of prediction models.
}
\section{Usage}{

\preformatted{
pdp = PartialDependence$new(predictor, data, feature, grid.size = 10, run = TRUE)

plot(pdp)
pdp$data
print(pdp)
pdp$feature = 2
}
}

\section{Arguments}{


For PartialDependence$new():
\describe{
\item{predictor}{Object of type \code{Predictor}. See \link{Predictor}}
\item{data}{data.frame with the data for the prediction model.}
\item{feature}{The feature index for which to compute the partial dependencies. 
Either a single number or vector of two numbers.}
\item{grid.size}{The size of the grid for evaluating the predictions}
\item{run}{logical. Should the Interpretation method be run?}
}
}

\section{Details}{

The partial dependence plot calculates and plots the dependence of f(X) on a single or two features.
To learn more about partial dependence plot, read the Interpretable Machine Learning book: 
https://christophm.github.io/interpretable-ml-book/pdp.html
}

\section{Fields}{

\describe{
\item{feature.index}{The index of the features for which the partial dependence was computed.}
\item{feature.names}{The names of the features for which the partial dependence was computed.}
\item{feature.type}{The detected types of the features, either "categorical" or "numerical".}
\item{grid.size}{The size of the grid.}
\item{n.features}{The number of features (either 1 or 2)}
}
}

\section{Methods}{

\describe{
\item{feature}{method to get/set feature(s) (by index) fpr  which to compute pdp. See examples for usage.}
\item{data()}{method to extract the results of the partial dependence plot. 
Returns a data.frame with the grid of feature of interest and the predicted \eqn{\hat{y}}. 
Can be used for creating custom partial dependence plots.}
\item{plot()}{method to plot the partial dependence function. See \link{plot.PartialDependence}}
\item{\code{run()}}{[internal] method to run the interpretability method. Use \code{obj$run(force = TRUE)} to force a rerun.}
General R6 methods
\item{\code{clone()}}{[internal] method to clone the R6 object.}
\item{\code{initialize()}}{[internal] method to initialize the R6 object.}
}
}

\examples{
# We train a random forest on the Boston dataset:
library("randomForest")
data("Boston", package  = "MASS")
rf = randomForest(medv ~ ., data = Boston, ntree = 50)
mod = makePredictor(rf)

# Compute the partial dependence for the first feature
pdp.obj = PartialDependence$new(mod, Boston, feature = 1)

# Plot the results directly
plot(pdp.obj)


# Since the result is a ggplot object, you can extend it: 
library("ggplot2")
plot(pdp.obj) + theme_bw()

# If you want to do your own thing, just extract the data: 
pdp.dat = pdp.obj$data()
head(pdp.dat)

# You can reuse the pdp object for other features: 
pdp.obj$feature = 2
plot(pdp.obj)

# Partial dependence plots support up to two features: 
pdp.obj = PartialDependence$new(mod, Boston, feature = c(1,2))  

# Partial dependence plots also works with multiclass classification
library("randomForest")
rf = randomForest(Species ~ ., data= iris, ntree=50)
mod = makePredictor(rf, predict.args = list(type = 'prob'))

# For some models we have to specify additional arguments for the predict function
plot(PartialDependence$new(mod, iris, feature = 1))

# Partial dependence plots support up to two features: 
pdp.obj = PartialDependence$new(mod, iris, feature = c(1,3))
pdp.obj$plot()   

# For multiclass classification models, you can choose to only show one class:
mod = makePredictor(rf, predict.args = list(type = 'prob'), class = 1)
plot(PartialDependence$new(mod, iris, feature = 1))

}
\references{
Friedman, J.H. 2001. "Greedy Function Approximation: A Gradient Boosting Machine." Annals of Statistics 29: 1189-1232.
}
\seealso{
\link{plot.PartialDependence}

\code{\link{Ice}} for individual conditional expectation plots.
}
